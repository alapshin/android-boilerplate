apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: 'net.ltgt.errorprone'

apply plugin: 'io.fabric'

apply from: rootProject.file('gradle/helpers.gradle')
apply from: rootProject.file('gradle/checkstyle.gradle')
apply from: rootProject.file('gradle/detekt.gradle')
apply from: rootProject.file('gradle/findbugs.gradle')

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.alapshin.boilerplate"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk

        versionName "1.0"
        versionCode getRevisionNumber()
        versionNameSuffix "-" + versionCode + "." + getRevisionId()

        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resValue "string", "fabric_api_key", "e9c70adcc0565fff7b6bdc0086c7f5ac15a4b7e8"
    }

    signingConfigs {
        common {
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(rootProject.file('keystore.properties')))
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile rootProject.file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.common
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            signingConfig signingConfigs.common
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        quiet false
        // Stop the gradle build if errors are found
        abortOnError true
        // Don't check disabled warnings
        checkAllWarnings false
        // Don't treat warnings as errors
        warningsAsErrors false
        lintConfig rootProject.file('lint.xml')
    }


    // Rename resulting apk adding version code and commit hash
    applicationVariants.all { variant ->
        def flavor = variant.mergedFlavor
        variant.outputs.all { output ->
            outputFileName = "${project.name}-${variant.baseName}-${flavor.versionNameSuffix.substring(1)}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation libraries.support
    implementation libraries.supportappcompat
    implementation libraries.supportconstraintlayout
    implementation libraries.supportmultidex
    implementation libraries.supportvector
    implementation libraries.supportanimatedvector

    implementation (libraries.crashlytics) {
        transitive true
    }
    implementation libraries.firebasecore

    implementation libraries.kotlinstdlib
    debugImplementation libraries.leakcanary
    releaseImplementation libraries.leakcanarynoop

    testImplementation libraries.junit
    testImplementation libraries.mockito

    androidTestImplementation libraries.espresso
    androidTestImplementation libraries.supporttestrunner
}

apply plugin: 'com.google.gms.google-services'